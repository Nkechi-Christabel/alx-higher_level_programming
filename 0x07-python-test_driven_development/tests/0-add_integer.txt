# Test cases for add_integer function
=====================================

The 0-add_integer module adds two integers. The values
provided must be only integers of float, otherwise, TypeError 
is thrown.

Usage
=====

Import "add_integer" from the "0-add_integer" module:
>>> add_integer = __import__('0-add_integer').add_integer

# Test 1: Adding two positive integers
>>> add_integer(5, 7)
12

# Test 2: Adding two negative integers
>>> add_integer(-5, -7)
-12

# Test 3: Adding a positive integer and a negative integer
>>> add_integer(5, -7)
-2

# Test 4: Adding two large integers
>>> add_integer(999999999, 888888888)
1888888887

# Test 5: Adding two floating-point numbers
>>> add_integer(5.5, 7.3)
12

# Test 6: Adding an integer and a float with one as the default value
>>> add_integer(5, 1.5)
6

# Test 7: Adding two floats with one as the default value
>>> add_integer(1.2, 1.2)
2

# Test 8: Calling add_integer with no arguments (should raise TypeError)
>>> add_integer()
Traceback (most recent call last):
    ...
TypeError: add_integer() missing 1 required positional argument: 'a'

# Test 9: Trying to add a string and an integer (should raise TypeError)
>>> add_integer("5", 7)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

>>> add_integer(4, "Hello")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

# Test 10: Trying to add a boolean and an integer (should raise TypeError)
>>> add_integer(True, 7)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test 11: Calling add_integer with None as the first argument (should raise TypeError)
>>> add_integer(None, 7)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test 13: Adding two floats that result in NaN (should return NaN)
>>> add_integer(float('nan'), float('nan'))
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer
